#!/bin/sh

### BEGIN INIT INFO
# Provides:          metasploit
# Required-Start:    $remote_fs $network $named postgresql
# Required-Stop:     $remote_fs $network $named postgresql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Metasploit RPC and web daemons
### END INIT INFO

set -e

# If this script is called from within itself, exit now
[ -z "$IN_METASPLOIT_INIT" ] || exit 0

INSTDIR=/opt/metasploit
SETENV="$INSTDIR/scripts/setenv.sh"
PROSVC_SCRIPT="$INSTDIR/apps/pro/engine/scripts/ctl.sh"
PROSVC_PIDFILE="$INSTDIR/apps/pro/engine/tmp/prosvc.pid"
THIN_SCRIPT="$INSTDIR/apps/pro/ui/scripts/ctl.sh"
THIN_PIDFILE="$INSTDIR/apps/pro/ui/log/thin.pid"
WORKER_SCRIPT="$INSTDIR/apps/pro/ui/scripts/worker_ctl.sh"
WORKER_PIDFILE="$INSTDIR/apps/pro/ui/tmp/pids/delayed_job_monitor.pid"

test -x $PROSVC_SCRIPT || exit 0
test -x $THIN_SCRIPT || exit 0
test -x $WORKER_SCRIPT || exit 0
test -e $SETENV || exit 0

. /lib/lsb/init-functions
. $SETENV

require_root () {
  if [ `id -u` -ne 0 ]; then
    log_failure_msg "$0 must be run as root"
    exit 2
  fi
}

postgresql_started () {
  if pg_lsclusters | grep online >/dev/null; then
    return 0
  fi
  return 1
}

prosvc_started () {
  if pidofproc -p $PROSVC_PIDFILE >/dev/null; then
    return 0
  fi
  # Prosvc is slow to write its pid, so check the process list
  if ps -o args -C ruby | grep prosvc >/dev/null; then
    return 0
  fi
  return 1
}

thin_started() {
  if pidofproc -p $THIN_PIDFILE >/dev/null; then
    return 0
  fi
  # Thin is slow to write its pid, so check the process list
  if ps -o args -C ruby | grep thin >/dev/null; then
    return 0
  fi
  return 1
}

worker_started() {
  if pidofproc -p $WORKER_PIDFILE >/dev/null; then
    return 0
  fi
  # Worker is slow to write its pid, so check the process list
  if ps -o args -C ruby | grep worker_ctl.rb >/dev/null; then
    return 0
  fi
  return 1
}

msp_configured () {
  [ -e "$INSTDIR/properties.ini" ]
  return $?
}

case "$1" in
  start)
    require_root

    if ! postgresql_started; then
      log_failure_msg "Postgresql must be started before Metasploit"
      exit 5
    fi

    if ! msp_configured; then
      export IN_METASPLOIT_INIT=1
      echo "Configuring Metasploit..."
      dpkg-reconfigure metasploit
      unset IN_METASPLOIT_INIT
      if ! msp_configured; then
        log_failure_msg "Cannot start metasploit: not configured"
        exit 4
      fi
    fi

    if prosvc_started; then
      log_success_msg "Metasploit rpc server already started"
    else
      log_daemon_msg "Starting Metasploit rpc server" "prosvc"
      $PROSVC_SCRIPT start >/dev/null
      log_end_msg $?
    fi
    if thin_started; then
      log_success_msg "Metasploit web server already started"
    else
      log_daemon_msg "Starting Metasploit web server" "thin"
      $THIN_SCRIPT start >/dev/null
      log_end_msg $?
    fi
    if worker_started; then
      log_success_msg "Metasploit worker already started"
    else
      log_daemon_msg "Starting Metasploit worker" "worker"
      $WORKER_SCRIPT start >/dev/null
      log_end_msg $?
    fi
    ;;

  stop)
    require_root
    set +e
    log_daemon_msg "Stopping Metasploit worker" "worker"
    $WORKER_SCRIPT stop >/dev/null
    log_end_msg $?
    log_daemon_msg "Stopping Metasploit web server" "thin"
    $THIN_SCRIPT stop >/dev/null
    log_end_msg $?
    log_daemon_msg "Stopping Metasploit rpc server" "prosvc"
    $PROSVC_SCRIPT stop >/dev/null
    log_end_msg $?
    set -e
    ;;

  reload|force-reload)
    $0 restart
    ;;

  restart)
    require_root
    $0 stop
    sleep 2
    $0 start
    ;;

  status)
    exitcode=0
    if prosvc_started; then
      log_success_msg "Metasploit rpc server is running"
    else
      log_failure_msg "Metasploit rpc server is not running"
      exitcode=$(expr $exitcode + 1)
    fi
    if thin_started; then
      log_success_msg "Metasploit web server is running"
    else
      log_failure_msg "Metasploit web server is not running"
      exitcode=$(expr $exitcode + 2)
    fi
    if worker_started; then
      log_success_msg "Metasploit worker is running"
    else
      log_failure_msg "Metasploit worker is not running"
      exitcode=$(expr $exitcode + 4)
    fi
    return $exitcode
    ;;

  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 6
    ;;
esac

exit 0
